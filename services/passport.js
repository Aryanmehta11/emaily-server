const passport=require('passport')
const GoogleStrategy=require('passport-google-oauth20').Strategy;
const mongoose=require('mongoose')
const keys=require('../config/keys')

const User=mongoose.model('users')

passport.serializeUser((user,done)=>{ // Helps to assign an unique identifier and stuff it in a cookie
    done(null,user.id) // Every User will have id generated by Mongo 
});

// Helps to remove the idenfifier from the cookie 

passport.deserializeUser((id,done)=>{
    User.findById(id)
    .then(user=>{
        done(null,user);
    })
})


passport.use(new GoogleStrategy({
    clientID:keys.googleClientID,
    clientSecret:keys.googleClientSecret,
    callbackURL:'/auth/google/callback',
    proxy:true
},async (accessToken,refreshToken,profile,done)=>{
    const existingUser=await User.findOne({googleId:profile.id})
    
        if(existingUser){

           return done(null,existingUser);
        }
            //We already have a record with a profile id 
        const user= await new User({googleId:profile.id}).save()
        done(null,user)
    }
)) // New Instance  of Google Password Strategy , helping in authenticating users with Google , passport.use enables passport to use google strategy.
